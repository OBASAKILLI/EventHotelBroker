@using EventHotelBroker.Services
@inject ToastService ToastService
@implements IDisposable

<div class="toast-container">
    @foreach (var toast in toasts)
    {
        <div class="toast-system toast-system-@toast.Type.ToString().ToLower()" @key="toast.Id">
            <div class="toast-system-header">
                <div class="toast-system-title">
                    @if (toast.Type == ToastType.Success)
                    {
                        <i class="bi bi-check-circle-fill"></i>
                    }
                    else if (toast.Type == ToastType.Error)
                    {
                        <i class="bi bi-x-circle-fill"></i>
                    }
                    else if (toast.Type == ToastType.Warning)
                    {
                        <i class="bi bi-exclamation-triangle-fill"></i>
                    }
                    else if (toast.Type == ToastType.Info)
                    {
                        <i class="bi bi-info-circle-fill"></i>
                    }
                    <span>@toast.Title</span>
                </div>
                <button class="toast-system-close" @onclick="() => RemoveToast(toast.Id)">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="toast-system-body">
                @toast.Message
            </div>
        </div>
    }
</div>

<style>
    .toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        max-width: 24rem;
    }
</style>

@code {
    private List<ToastMessage> toasts = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(string title, string message, ToastType type)
    {
        var toast = new ToastMessage
        {
            Id = Guid.NewGuid(),
            Title = title,
            Message = message,
            Type = type
        };

        toasts.Add(toast);
        StateHasChanged();

        // Auto-remove after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            RemoveToast(toast.Id);
        });
    }

    private void RemoveToast(Guid id)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            toasts.Remove(toast);
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }

    private class ToastMessage
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public ToastType Type { get; set; }
    }
}
