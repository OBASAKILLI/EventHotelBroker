@page "/owner/event-packages"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IEventService EventService
@inject NavigationManager Navigation

<PageTitle>My Event Packages - Owner</PageTitle>

<link href="/css/events-module.css" rel="stylesheet" />

<div class="container-fluid px-4 py-4 animate-fade-in">
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-gift me-3"></i>My Event Packages</h1>
                <p>Create and manage your event packages</p>
            </div>
            <button class="btn-modern btn-gradient-primary" @onclick="CreatePackage">
                <i class="bi bi-plus-circle me-2"></i>Create Package
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your packages...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Statistics -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@packages.Count()</p>
                            <p class="stats-label mb-0">Total Packages</p>
                        </div>
                        <div class="stats-icon" style="background: var(--primary-gradient);">
                            <i class="bi bi-gift"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@packages.Count(p => p.IsActive && p.IsApproved)</p>
                            <p class="stats-label mb-0">Active</p>
                        </div>
                        <div class="stats-icon" style="background: var(--success-gradient);">
                            <i class="bi bi-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@packages.Count(p => !p.IsApproved)</p>
                            <p class="stats-label mb-0">Pending</p>
                        </div>
                        <div class="stats-icon" style="background: var(--warning-gradient);">
                            <i class="bi bi-clock-history"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@packages.Count(p => p.IsFeatured)</p>
                            <p class="stats-label mb-0">Featured</p>
                        </div>
                        <div class="stats-icon" style="background: var(--info-gradient);">
                            <i class="bi bi-star"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Packages Grid -->
        @if (packages.Any())
        {
            <div class="row g-4">
                @foreach (var package in packages)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="modern-card package-card position-relative">
                            @if (package.IsFeatured)
                            {
                                <div class="featured-badge">
                                    <i class="bi bi-star-fill me-1"></i>Featured
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(package.ImageUrl))
                            {
                                <img src="@package.ImageUrl" class="card-img-top" alt="@package.Name" style="height: 200px; object-fit: cover;" />
                            }
                            else
                            {
                                <div class="card-img-top d-flex align-items-center justify-content-center" style="height: 200px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                    <i class="bi bi-gift display-1 text-white"></i>
                                </div>
                            }
                            <div class="modern-card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <span class="badge-modern badge-gradient-info">@package.PackageType</span>
                                    <div class="d-flex gap-1">
                                        @if (package.IsApproved)
                                        {
                                            <span class="badge bg-success">Approved</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Pending</span>
                                        }
                                        @if (package.IsActive)
                                        {
                                            <span class="badge bg-primary">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </div>
                                </div>
                                
                                <h4 class="mb-2">@package.Name</h4>
                                <p class="text-muted small mb-3">@package.Description.Substring(0, Math.Min(100, package.Description.Length))...</p>
                                
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        @if (package.DiscountedPrice.HasValue)
                                        {
                                            <div>
                                                <span class="text-decoration-line-through text-muted small">$@package.TotalPrice.ToString("N2")</span>
                                                <h4 class="text-success mb-0">$@package.DiscountedPrice.Value.ToString("N2")</h4>
                                            </div>
                                        }
                                        else
                                        {
                                            <h4 class="mb-0">$@package.TotalPrice.ToString("N2")</h4>
                                        }
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">
                                            <i class="bi bi-people me-1"></i>
                                            @package.MinGuests-@package.MaxGuests
                                        </small>
                                    </div>
                                </div>

                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary btn-sm flex-fill" @onclick="() => EditPackage(package.Id)">
                                        <i class="bi bi-pencil me-1"></i>Edit
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ToggleActive(package.Id)">
                                        <i class="bi @(package.IsActive ? "bi-pause" : "bi-play") me-1"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeletePackage(package.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="modern-card">
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="mt-3">No Packages Created Yet</h4>
                    <p class="text-muted mb-4">Create attractive event packages to boost your bookings</p>
                    <button class="btn-modern btn-gradient-primary" @onclick="CreatePackage">
                        <i class="bi bi-plus-circle me-2"></i>Create Your First Package
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private List<EventPackage> packages = new();
    private string currentProviderId = "temp-provider-id"; // In production, get from auth context

    protected override async Task OnInitializedAsync()
    {
        await LoadPackages();
    }

    private async Task LoadPackages()
    {
        isLoading = true;
        try
        {
            var allPackages = await EventService.GetPackagesByProviderAsync(currentProviderId);
            packages = allPackages.ToList();
        }
        catch (Exception ex)
        {
            // Log error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreatePackage()
    {
        Navigation.NavigateTo("/owner/create-package");
    }

    private void EditPackage(int id)
    {
        Navigation.NavigateTo($"/owner/edit-package/{id}");
    }

    private async Task ToggleActive(int id)
    {
        var package = packages.FirstOrDefault(p => p.Id == id);
        if (package != null)
        {
            package.IsActive = !package.IsActive;
            await EventService.UpdatePackageAsync(package);
            await LoadPackages();
        }
    }

    private async Task DeletePackage(int id)
    {
        if (confirm("Are you sure you want to delete this package?"))
        {
            await EventService.DeletePackageAsync(id);
            await LoadPackages();
        }
    }

    private bool confirm(string message)
    {
        // In production, use a proper modal dialog
        return true;
    }
}
