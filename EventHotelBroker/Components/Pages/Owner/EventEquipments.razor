@page "/owner/event-equipments"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IEventService EventService
@inject NavigationManager Navigation

<PageTitle>My Event Equipments - Owner</PageTitle>

<link href="/css/events-module.css" rel="stylesheet" />

<div class="container-fluid px-4 py-4 animate-fade-in">
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-box-seam me-3"></i>My Event Equipments</h1>
                <p>Manage your event equipment inventory</p>
            </div>
            <button class="btn-modern btn-gradient-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle me-2"></i>Add Equipment
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your equipments...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Statistics -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@equipments.Count()</p>
                            <p class="stats-label mb-0">Total Equipment</p>
                        </div>
                        <div class="stats-icon" style="background: var(--primary-gradient);">
                            <i class="bi bi-box-seam"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@equipments.Count(e => e.IsApproved)</p>
                            <p class="stats-label mb-0">Approved</p>
                        </div>
                        <div class="stats-icon" style="background: var(--success-gradient);">
                            <i class="bi bi-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@equipments.Count(e => !e.IsApproved)</p>
                            <p class="stats-label mb-0">Pending</p>
                        </div>
                        <div class="stats-icon" style="background: var(--warning-gradient);">
                            <i class="bi bi-clock-history"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@equipments.Sum(e => e.AvailableQuantity)</p>
                            <p class="stats-label mb-0">Total Units</p>
                        </div>
                        <div class="stats-icon" style="background: var(--info-gradient);">
                            <i class="bi bi-stack"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Equipment Grid -->
        @if (equipments.Any())
        {
            <div class="equipment-grid">
                @foreach (var equipment in equipments)
                {
                    <div class="equipment-item">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div class="equipment-icon @equipment.Category.ToLower().Replace(" ", "")">
                                <i class="bi @GetCategoryIcon(equipment.Category)"></i>
                            </div>
                            @if (equipment.IsApproved)
                            {
                                <span class="badge bg-success">Approved</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">Pending</span>
                            }
                        </div>
                        
                        <h5 class="mb-2">@equipment.Name</h5>
                        <span class="badge-modern badge-gradient-info mb-2">@equipment.Category</span>
                        <p class="text-muted small mb-3">@equipment.Description.Substring(0, Math.Min(80, equipment.Description.Length))...</p>
                        
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                                <h4 class="mb-0 text-primary">$@equipment.PricePerUnit.ToString("N2")</h4>
                                <small class="text-muted">per @equipment.Unit</small>
                            </div>
                            <div>
                                <span class="badge @(equipment.IsAvailable ? "bg-success" : "bg-danger")">
                                    @equipment.AvailableQuantity units
                                </span>
                            </div>
                        </div>

                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary btn-sm flex-fill" @onclick="() => EditEquipment(equipment.Id)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteEquipment(equipment.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="modern-card">
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="mt-3">No Equipment Added Yet</h4>
                    <p class="text-muted mb-4">Start adding your event equipment to reach more customers</p>
                    <button class="btn-modern btn-gradient-primary" @onclick="ShowCreateModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Your First Equipment
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private List<EventEquipment> equipments = new();
    private string currentProviderId = "temp-provider-id"; // In production, get from auth context

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
    }

    private async Task LoadEquipments()
    {
        isLoading = true;
        try
        {
            var allEquipments = await EventService.GetEquipmentsByProviderAsync(currentProviderId);
            equipments = allEquipments.ToList();
        }
        catch (Exception ex)
        {
            // Log error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/owner/create-equipment");
    }

    private void EditEquipment(int id)
    {
        Navigation.NavigateTo($"/owner/edit-equipment/{id}");
    }

    private async Task DeleteEquipment(int id)
    {
        if (confirm("Are you sure you want to delete this equipment?"))
        {
            await EventService.DeleteEquipmentAsync(id);
            await LoadEquipments();
        }
    }

    private bool confirm(string message)
    {
        // In production, use a proper modal dialog
        return true;
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Tents" => "bi-house",
            "Chairs" => "bi-chair",
            "Sound System" => "bi-speaker",
            "Lighting" => "bi-lightbulb",
            "Catering" => "bi-cup-hot",
            "Decoration" => "bi-flower1",
            _ => "bi-box-seam"
        };
    }
}
