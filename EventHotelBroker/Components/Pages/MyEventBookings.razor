@page "/my-event-bookings"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IEventService EventService

<PageTitle>My Event Bookings - EventHotelBroker</PageTitle>

<link href="/css/events-module.css" rel="stylesheet" />

<div class="container-fluid px-4 py-5 animate-fade-in">
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-calendar-check me-3"></i>My Event Bookings</h1>
                <p>Track and manage your event bookings</p>
            </div>
            <a href="/events" class="btn-modern btn-gradient-primary">
                <i class="bi bi-plus-circle me-2"></i>New Booking
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your bookings...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Statistics -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count()</p>
                            <p class="stats-label mb-0">Total Bookings</p>
                        </div>
                        <div class="stats-icon" style="background: var(--primary-gradient);">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count(b => b.Status == EventBookingStatus.Pending)</p>
                            <p class="stats-label mb-0">Pending</p>
                        </div>
                        <div class="stats-icon" style="background: var(--warning-gradient);">
                            <i class="bi bi-clock-history"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count(b => b.Status == EventBookingStatus.Confirmed)</p>
                            <p class="stats-label mb-0">Confirmed</p>
                        </div>
                        <div class="stats-icon" style="background: var(--success-gradient);">
                            <i class="bi bi-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@upcomingEvents</p>
                            <p class="stats-label mb-0">Upcoming</p>
                        </div>
                        <div class="stats-icon" style="background: var(--info-gradient);">
                            <i class="bi bi-calendar3"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bookings List -->
        @if (bookings.Any())
        {
            <div class="row g-4">
                @foreach (var booking in bookings.OrderByDescending(b => b.EventDate))
                {
                    <div class="col-lg-6">
                        <div class="modern-card">
                            <div class="modern-card-body">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <div>
                                        <h4 class="mb-1">@booking.EventName</h4>
                                        <span class="badge-modern badge-gradient-info">
                                            <i class="bi bi-tag me-1"></i>@booking.EventType
                                        </span>
                                    </div>
                                    <span class="booking-status @GetStatusClass(booking.Status)">
                                        <i class="bi @GetStatusIcon(booking.Status)"></i>
                                        @booking.Status
                                    </span>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-calendar3 me-2 text-primary"></i>
                                        <strong>@booking.EventDate.ToString("MMMM dd, yyyy")</strong>
                                        @if (booking.EventEndDate.HasValue)
                                        {
                                            <span class="ms-1">- @booking.EventEndDate.Value.ToString("MMM dd, yyyy")</span>
                                        }
                                    </div>
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-geo-alt me-2 text-primary"></i>
                                        <span>@booking.Venue</span>
                                    </div>
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-people me-2 text-primary"></i>
                                        <span>@booking.ExpectedGuests guests</span>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(booking.SpecialRequests))
                                {
                                    <div class="alert alert-light mb-3">
                                        <small><strong>Special Requests:</strong> @booking.SpecialRequests</small>
                                    </div>
                                }

                                @if (booking.Status == EventBookingStatus.Rejected && !string.IsNullOrEmpty(booking.RejectionReason))
                                {
                                    <div class="alert alert-danger mb-3">
                                        <small><strong>Rejection Reason:</strong> @booking.RejectionReason</small>
                                    </div>
                                }

                                <div class="d-flex justify-content-between align-items-center pt-3 border-top">
                                    <div>
                                        <h3 class="mb-0 text-success">$@booking.TotalAmount.ToString("N2")</h3>
                                        @if (booking.DepositAmount.HasValue)
                                        {
                                            <small class="text-muted">Deposit: $@booking.DepositAmount.Value.ToString("N2")</small>
                                        }
                                    </div>
                                    <div class="d-flex gap-2">
                                        @if (booking.Status == EventBookingStatus.Pending)
                                        {
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => CancelBooking(booking.Id)">
                                                <i class="bi bi-x-circle me-1"></i>Cancel
                                            </button>
                                        }
                                        <button class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-eye me-1"></i>Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="modern-card">
                <div class="text-center py-5">
                    <i class="bi bi-calendar-x display-1 text-muted"></i>
                    <h4 class="mt-3">No Event Bookings Yet</h4>
                    <p class="text-muted mb-4">Start planning your perfect event today!</p>
                    <a href="/events" class="btn-modern btn-gradient-primary">
                        <i class="bi bi-plus-circle me-2"></i>Browse Event Services
                    </a>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private List<EventBooking> bookings = new();
    private int upcomingEvents = 0;
    private string currentUserId = "temp-user-id"; // In production, get from auth context

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        isLoading = true;
        try
        {
            var allBookings = await EventService.GetBookingsByUserAsync(currentUserId);
            bookings = allBookings.ToList();
            upcomingEvents = bookings.Count(b => b.EventDate >= DateTime.Today && 
                                                 (b.Status == EventBookingStatus.Confirmed || b.Status == EventBookingStatus.Pending));
        }
        catch (Exception ex)
        {
            // Log error
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CancelBooking(int bookingId)
    {
        if (confirm("Are you sure you want to cancel this booking?"))
        {
            await EventService.CancelBookingAsync(bookingId);
            await LoadBookings();
        }
    }

    private bool confirm(string message)
    {
        // In production, use a proper modal dialog
        return true;
    }

    private string GetStatusClass(EventBookingStatus status)
    {
        return status switch
        {
            EventBookingStatus.Pending => "pending",
            EventBookingStatus.Confirmed => "confirmed",
            EventBookingStatus.Rejected => "rejected",
            EventBookingStatus.Cancelled => "rejected",
            EventBookingStatus.Completed => "completed",
            _ => ""
        };
    }

    private string GetStatusIcon(EventBookingStatus status)
    {
        return status switch
        {
            EventBookingStatus.Pending => "bi-clock-history",
            EventBookingStatus.Confirmed => "bi-check-circle-fill",
            EventBookingStatus.Rejected => "bi-x-circle-fill",
            EventBookingStatus.Cancelled => "bi-dash-circle-fill",
            EventBookingStatus.Completed => "bi-check-circle-fill",
            _ => "bi-circle"
        };
    }
}
