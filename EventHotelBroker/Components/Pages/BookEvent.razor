@page "/book-event"
@rendermode InteractiveServer
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IEventService EventService
@inject NavigationManager Navigation

<PageTitle>Book Event - EventHotelBroker</PageTitle>

<link href="/css/events-module.css" rel="stylesheet" />

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="event-booking-form">
                <div class="text-center mb-4">
                    <h2 class="fw-bold">
                        <i class="bi bi-calendar-event me-2" style="color: #667eea;"></i>
                        Book Your Event
                    </h2>
                    <p class="text-muted">Fill in the details to request your event booking</p>
                </div>

                @if (successMessage != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle me-2"></i>@successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                    </div>
                }

                @if (errorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }

                <EditForm Model="@booking" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    <div class="row g-3">
                        <!-- Event Name -->
                        <div class="col-12">
                            <label class="form-label">Event Name *</label>
                            <InputText @bind-Value="booking.EventName" class="form-control" placeholder="e.g., John & Jane's Wedding" />
                            <ValidationMessage For="@(() => booking.EventName)" />
                        </div>

                        <!-- Event Type -->
                        <div class="col-md-6">
                            <label class="form-label">Event Type *</label>
                            <InputSelect @bind-Value="booking.EventType" class="form-select">
                                <option value="">Select Type</option>
                                <option value="Wedding">Wedding</option>
                                <option value="Corporate">Corporate Event</option>
                                <option value="Birthday">Birthday Party</option>
                                <option value="Conference">Conference</option>
                                <option value="Party">Party</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => booking.EventType)" />
                        </div>

                        <!-- Expected Guests -->
                        <div class="col-md-6">
                            <label class="form-label">Expected Guests *</label>
                            <InputNumber @bind-Value="booking.ExpectedGuests" class="form-control" placeholder="100" />
                            <ValidationMessage For="@(() => booking.ExpectedGuests)" />
                        </div>

                        <!-- Event Date -->
                        <div class="col-md-6">
                            <label class="form-label">Event Date *</label>
                            <InputDate @bind-Value="booking.EventDate" class="form-control" />
                            <ValidationMessage For="@(() => booking.EventDate)" />
                        </div>

                        <!-- Event End Date -->
                        <div class="col-md-6">
                            <label class="form-label">Event End Date (Optional)</label>
                            <InputDate @bind-Value="booking.EventEndDate" class="form-control" />
                        </div>

                        <!-- Venue -->
                        <div class="col-12">
                            <label class="form-label">Venue/Location *</label>
                            <InputText @bind-Value="booking.Venue" class="form-control" placeholder="Event venue address" />
                            <ValidationMessage For="@(() => booking.Venue)" />
                        </div>

                        <!-- Contact Information -->
                        <div class="col-12">
                            <h5 class="mt-3 mb-3">Contact Information</h5>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Contact Name *</label>
                            <InputText @bind-Value="booking.ContactName" class="form-control" placeholder="Full Name" />
                            <ValidationMessage For="@(() => booking.ContactName)" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Contact Phone *</label>
                            <InputText @bind-Value="booking.ContactPhone" class="form-control" placeholder="+1234567890" />
                            <ValidationMessage For="@(() => booking.ContactPhone)" />
                        </div>

                        <div class="col-12">
                            <label class="form-label">Contact Email</label>
                            <InputText @bind-Value="booking.ContactEmail" class="form-control" type="email" placeholder="email@example.com" />
                        </div>

                        <!-- Special Requests -->
                        <div class="col-12">
                            <label class="form-label">Special Requests</label>
                            <InputTextArea @bind-Value="booking.SpecialRequests" class="form-control" rows="4" placeholder="Any special requirements or notes..." />
                        </div>

                        <!-- Estimated Budget -->
                        <div class="col-12">
                            <div class="price-display">
                                <div class="price-label">Estimated Total</div>
                                <div class="price-amount">
                                    <span class="price-currency">$</span>@estimatedTotal.ToString("N2")
                                </div>
                                <div class="price-period">Final price will be confirmed</div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="col-12 mt-4">
                            <button type="button" class="btn btn-primary btn-lg w-100" @onclick="ProceedToCheckout">
                                <i class="bi bi-credit-card me-2"></i>
                                <span>Proceed to Payment</span>
                            </button>
                        </div>

                        <div class="col-12 text-center">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Your booking request will be reviewed and confirmed within 24 hours
                            </small>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? PackageId { get; set; }

    [SupplyParameterFromQuery]
    public int? EquipmentId { get; set; }

    private EventBooking booking = new()
    {
        EventDate = DateTime.Today.AddDays(30),
        UserId = "temp-user-id" // In production, get from auth context
    };

    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;
    private decimal estimatedTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        if (PackageId.HasValue)
        {
            var package = await EventService.GetPackageByIdAsync(PackageId.Value);
            if (package != null)
            {
                booking.PackageId = package.Id;
                booking.EventType = package.PackageType;
                estimatedTotal = package.DiscountedPrice ?? package.TotalPrice;
            }
        }
        else if (EquipmentId.HasValue)
        {
            var equipment = await EventService.GetEquipmentByIdAsync(EquipmentId.Value);
            if (equipment != null)
            {
                estimatedTotal = equipment.PricePerUnit;
            }
        }

        booking.TotalAmount = estimatedTotal;
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            booking.TotalAmount = estimatedTotal;
            await EventService.CreateBookingAsync(booking);
            
            successMessage = "Your booking request has been submitted successfully! We'll contact you shortly.";
            
            // Reset form
            await Task.Delay(2000);
            Navigation.NavigateTo("/my-event-bookings");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while submitting your booking. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ProceedToCheckout()
    {
        // Store booking data in session/temp storage and navigate to checkout
        // For now, navigate to event checkout with package ID if available
        var packageId = Navigation.Uri.Contains("packageId=") 
            ? Navigation.Uri.Split("packageId=")[1].Split('&')[0] 
            : "0";
        Navigation.NavigateTo($"/event/checkout?packageId={packageId}");
    }
}
