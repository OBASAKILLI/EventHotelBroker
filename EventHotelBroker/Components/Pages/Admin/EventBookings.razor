@page "/admin/event-bookings"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IEventService EventService

<PageTitle>Event Bookings - Admin</PageTitle>

<div class="container-fluid px-4 animate-fade-in">
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-calendar-event me-3"></i>Event Bookings</h1>
                <p>Manage all event bookings</p>
            </div>
            <div class="d-flex gap-2">
                <select class="form-select" @bind="selectedStatus" @bind:after="FilterBookings" style="width: 200px;">
                    <option value="">All Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Cancelled">Cancelled</option>
                    <option value="Completed">Completed</option>
                </select>
                <button class="btn btn-outline-secondary" @onclick="RefreshData">
                    <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading bookings...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Statistics Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count()</p>
                            <p class="stats-label mb-0">Total Bookings</p>
                        </div>
                        <div class="stats-icon" style="background: var(--primary-gradient);">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count(b => b.Status == EventBookingStatus.Pending)</p>
                            <p class="stats-label mb-0">Pending</p>
                        </div>
                        <div class="stats-icon" style="background: var(--warning-gradient);">
                            <i class="bi bi-clock-history"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">@bookings.Count(b => b.Status == EventBookingStatus.Confirmed)</p>
                            <p class="stats-label mb-0">Confirmed</p>
                        </div>
                        <div class="stats-icon" style="background: var(--success-gradient);">
                            <i class="bi bi-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <p class="stats-number">$@totalRevenue.ToString("N2")</p>
                            <p class="stats-label mb-0">Total Revenue</p>
                        </div>
                        <div class="stats-icon" style="background: var(--info-gradient);">
                            <i class="bi bi-currency-dollar"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bookings List -->
        <div class="modern-card">
            <div class="modern-card-header">
                <h5 class="mb-0">All Event Bookings</h5>
            </div>
            <div class="modern-card-body p-0">
                @if (filteredBookings.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover modern-table mb-0">
                            <thead>
                                <tr>
                                    <th>Booking ID</th>
                                    <th>Event Details</th>
                                    <th>Date & Venue</th>
                                    <th>Contact</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in filteredBookings.OrderByDescending(b => b.CreatedAt))
                                {
                                    <tr>
                                        <td>
                                            <strong>#@booking.Id</strong>
                                            <br />
                                            <small class="text-muted">@booking.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        </td>
                                        <td>
                                            <strong>@booking.EventName</strong>
                                            <br />
                                            <span class="badge-modern badge-gradient-info">@booking.EventType</span>
                                            <br />
                                            <small class="text-muted">@booking.ExpectedGuests guests</small>
                                        </td>
                                        <td>
                                            <strong>@booking.EventDate.ToString("MMM dd, yyyy")</strong>
                                            @if (booking.EventEndDate.HasValue)
                                            {
                                                <span> - @booking.EventEndDate.Value.ToString("MMM dd")</span>
                                            }
                                            <br />
                                            <small class="text-muted">@booking.Venue</small>
                                        </td>
                                        <td>
                                            <strong>@booking.ContactName</strong>
                                            <br />
                                            <small class="text-muted">@booking.ContactPhone</small>
                                            @if (!string.IsNullOrEmpty(booking.ContactEmail))
                                            {
                                                <br />
                                                <small class="text-muted">@booking.ContactEmail</small>
                                            }
                                        </td>
                                        <td>
                                            <strong class="text-success">$@booking.TotalAmount.ToString("N2")</strong>
                                            @if (booking.DepositAmount.HasValue)
                                            {
                                                <br />
                                                <small class="text-muted">Deposit: $@booking.DepositAmount.Value.ToString("N2")</small>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge-modern @GetStatusBadgeClass(booking.Status)">
                                                <i class="bi @GetStatusIcon(booking.Status) me-1"></i>@booking.Status
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                @if (booking.Status == EventBookingStatus.Pending)
                                                {
                                                    <button class="btn btn-success" @onclick="() => ConfirmBooking(booking.Id)" title="Confirm">
                                                        <i class="bi bi-check-lg"></i>
                                                    </button>
                                                    <button class="btn btn-danger" @onclick="() => ShowRejectModal(booking.Id)" title="Reject">
                                                        <i class="bi bi-x-lg"></i>
                                                    </button>
                                                }
                                                @if (booking.Status == EventBookingStatus.Confirmed)
                                                {
                                                    <button class="btn btn-primary" @onclick="() => CompleteBooking(booking.Id)" title="Complete">
                                                        <i class="bi bi-check-circle"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-outline-info" title="View Details">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                        <p class="text-muted mt-3">No bookings found</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<EventBooking> bookings = new();
    private List<EventBooking> filteredBookings = new();
    private string selectedStatus = "";
    private decimal totalRevenue = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allBookings = await EventService.GetAllBookingsAsync();
            bookings = allBookings.ToList();
            totalRevenue = await EventService.GetTotalRevenueAsync();
            FilterBookings();
        }
        catch (Exception ex)
        {
            // Log error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterBookings()
    {
        if (string.IsNullOrEmpty(selectedStatus))
        {
            filteredBookings = bookings;
        }
        else
        {
            if (Enum.TryParse<EventBookingStatus>(selectedStatus, out var status))
            {
                filteredBookings = bookings.Where(b => b.Status == status).ToList();
            }
        }
    }

    private async Task ConfirmBooking(int id)
    {
        await EventService.ConfirmBookingAsync(id);
        await LoadData();
    }

    private async Task CompleteBooking(int id)
    {
        await EventService.CompleteBookingAsync(id);
        await LoadData();
    }

    private async Task ShowRejectModal(int id)
    {
        // In production, show a modal to get rejection reason
        var reason = "Not available";
        await RejectBooking(id, reason);
    }

    private async Task RejectBooking(int id, string reason)
    {
        await EventService.RejectBookingAsync(id, reason);
        await LoadData();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetStatusBadgeClass(EventBookingStatus status)
    {
        return status switch
        {
            EventBookingStatus.Pending => "badge-gradient-warning",
            EventBookingStatus.Confirmed => "badge-gradient-success",
            EventBookingStatus.Rejected => "badge-gradient-danger",
            EventBookingStatus.Cancelled => "badge-gradient-info",
            EventBookingStatus.Completed => "badge-gradient-primary",
            _ => "badge-gradient-info"
        };
    }

    private string GetStatusIcon(EventBookingStatus status)
    {
        return status switch
        {
            EventBookingStatus.Pending => "bi-clock-history",
            EventBookingStatus.Confirmed => "bi-check-circle",
            EventBookingStatus.Rejected => "bi-x-circle",
            EventBookingStatus.Cancelled => "bi-dash-circle",
            EventBookingStatus.Completed => "bi-check-circle-fill",
            _ => "bi-circle"
        };
    }
}
