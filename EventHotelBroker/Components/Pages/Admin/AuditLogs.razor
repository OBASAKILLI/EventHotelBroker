@page "/admin/audit-logs"
@using EventHotelBroker.Models
@using EventHotelBroker.Repositories
@inject IUnitOfWork UnitOfWork

<PageTitle>Audit Logs - Admin</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Audit Logs</h1>
        <button class="btn btn-outline-secondary" @onclick="LoadLogs">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!logs.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>No audit logs found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-sm">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>User</th>
                        <th>Action</th>
                        <th>Details</th>
                        <th>IP Address</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in logs)
                    {
                        <tr>
                            <td>@log.Id</td>
                            <td>@(log.UserId ?? "System")</td>
                            <td>
                                <span class="badge bg-@GetActionColor(log.ActionType)">@log.ActionType</span>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(log.Details))
                                {
                                    <small class="text-muted">@log.Details.Substring(0, Math.Min(50, log.Details.Length))@(log.Details.Length > 50 ? "..." : "")</small>
                                }
                            </td>
                            <td>@log.IpAddress</td>
                            <td>@log.CreatedAt.ToString("MMM dd, yyyy HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <p class="text-muted">Total Logs: @logs.Count</p>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<AuditLog> logs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        isLoading = true;
        try
        {
            var allLogs = await UnitOfWork.AuditLogs.GetAllAsync();
            logs = allLogs.OrderByDescending(l => l.CreatedAt).Take(100).ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetActionColor(string action)
    {
        return action?.ToLower() switch
        {
            "create" => "success",
            "update" => "primary",
            "delete" => "danger",
            "login" => "info",
            "logout" => "secondary",
            _ => "secondary"
        };
    }
}
