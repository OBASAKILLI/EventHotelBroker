@page "/admin/users"
@using EventHotelBroker.Models
@using EventHotelBroker.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<PageTitle>Manage Users - Admin</PageTitle>

<div class="container-fluid px-4 animate-fade-in">
    <!-- Modern Header -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-people me-3"></i>User Management</h1>
                <p>Manage all platform users and their roles</p>
            </div>
            <button class="btn-modern" style="background: var(--gray-200); color: var(--gray-700);" @onclick="LoadUsers">
                <i class="bi bi-arrow-clockwise me-2"></i>Refresh
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@users.Count</p>
                        <p class="stats-label mb-0">Total Users</p>
                    </div>
                    <div class="stats-icon" style="background: var(--primary-gradient);">
                        <i class="bi bi-people"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@users.Count(u => u.Role == "Admin")</p>
                        <p class="stats-label mb-0">Admins</p>
                    </div>
                    <div class="stats-icon" style="background: var(--danger-gradient);">
                        <i class="bi bi-shield-check"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@users.Count(u => u.Role == "HotelOwner")</p>
                        <p class="stats-label mb-0">Hotel Owners</p>
                    </div>
                    <div class="stats-icon" style="background: var(--success-gradient);">
                        <i class="bi bi-building"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@users.Count(u => u.Role == "User")</p>
                        <p class="stats-label mb-0">Clients</p>
                    </div>
                    <div class="stats-icon" style="background: var(--info-gradient);">
                        <i class="bi bi-person"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading users...</p>
            </div>
        </div>
    }
    else if (!users.Any())
    {
        <div class="modern-card">
            <div class="empty-state">
                <i class="bi bi-people empty-state-icon"></i>
                <h3 class="empty-state-title">No Users Found</h3>
                <p class="empty-state-text">There are no users in the system yet.</p>
            </div>
        </div>
    }
    else
    {
        <div class="table-modern">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>User Details</th>
                            <th>Contact</th>
                            <th>Role</th>
                            <th>Business</th>
                            <th>Joined</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <span style="font-weight: 600; color: var(--purple);">#@user.Id</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 40px; height: 40px; background: var(--primary-gradient); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 12px; color: white; font-weight: 600;">
                                            @user.FullName?.Substring(0, 1).ToUpper()
                                        </div>
                                        <div>
                                            <div style="font-weight: 600; color: var(--gray-800);">@user.FullName</div>
                                            <small class="text-muted">@user.Email</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div style="color: var(--gray-700);">
                                        <i class="bi bi-telephone me-1"></i>@(user.PhoneNumber ?? "N/A")
                                    </div>
                                </td>
                                <td>
                                    <span class="badge-modern @GetModernRoleBadge(user.Role)">
                                        <i class="bi @GetRoleIcon(user.Role) me-1"></i>@user.Role
                                    </span>
                                </td>
                                <td>
                                    <div style="color: var(--gray-700);">
                                        @if (!string.IsNullOrEmpty(user.BusinessName))
                                        {
                                            <i class="bi bi-briefcase me-1"></i>@user.BusinessName
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div style="color: var(--gray-600);">
                                        <i class="bi bi-calendar3 me-1"></i>@user.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<ApplicationUser> users = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            users = await DbContext.AspNetUsers
                .OrderByDescending(u => u.CreatedAt)
                .ToListAsync();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetRoleColor(string role)
    {
        return role switch
        {
            "Admin" => "danger",
            "HotelOwner" => "primary",
            "ServiceProvider" => "info",
            "User" => "secondary",
            _ => "secondary"
        };
    }

    private string GetModernRoleBadge(string role)
    {
        return role switch
        {
            "Admin" => "badge-gradient-danger",
            "HotelOwner" => "badge-gradient-success",
            "ServiceProvider" => "badge-gradient-info",
            "User" => "badge-gradient-warning",
            _ => "badge-gradient-info"
        };
    }

    private string GetRoleIcon(string role)
    {
        return role switch
        {
            "Admin" => "bi-shield-check",
            "HotelOwner" => "bi-building",
            "ServiceProvider" => "bi-briefcase",
            "User" => "bi-person",
            _ => "bi-person"
        };
    }
}
