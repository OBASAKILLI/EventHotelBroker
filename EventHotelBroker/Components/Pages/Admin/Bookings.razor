@page "/admin/bookings"
@using EventHotelBroker.Models
@using EventHotelBroker.Repositories
@inject IUnitOfWork UnitOfWork

<PageTitle>All Bookings - Admin</PageTitle>

<div class="container-fluid px-4 animate-fade-in">
    <!-- Modern Header -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-calendar-check me-3"></i>Booking Management</h1>
                <p>Monitor and manage all hotel bookings</p>
            </div>
            <button class="btn-modern" style="background: var(--gray-200); color: var(--gray-700);" @onclick="LoadBookings">
                <i class="bi bi-arrow-clockwise me-2"></i>Refresh
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@bookings.Count</p>
                        <p class="stats-label mb-0">Total Bookings</p>
                    </div>
                    <div class="stats-icon" style="background: var(--primary-gradient);">
                        <i class="bi bi-calendar-check"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@bookings.Count(b => b.Status == BookingStatus.Pending)</p>
                        <p class="stats-label mb-0">Pending</p>
                    </div>
                    <div class="stats-icon" style="background: var(--warning-gradient);">
                        <i class="bi bi-clock-history"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@bookings.Count(b => b.Status == BookingStatus.Confirmed)</p>
                        <p class="stats-label mb-0">Confirmed</p>
                    </div>
                    <div class="stats-icon" style="background: var(--success-gradient);">
                        <i class="bi bi-check-circle"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@bookings.Count(b => b.Status == BookingStatus.Cancelled || b.Status == BookingStatus.Rejected)</p>
                        <p class="stats-label mb-0">Cancelled/Rejected</p>
                    </div>
                    <div class="stats-icon" style="background: var(--danger-gradient);">
                        <i class="bi bi-x-circle"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="modern-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading bookings...</p>
            </div>
        </div>
    }
    else if (!bookings.Any())
    {
        <div class="modern-card">
            <div class="empty-state">
                <i class="bi bi-calendar-x empty-state-icon"></i>
                <h3 class="empty-state-title">No Bookings Found</h3>
                <p class="empty-state-text">There are no bookings in the system yet.</p>
            </div>
        </div>
    }
    else
    {
        <div class="table-modern">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Booking ID</th>
                            <th>Hotel</th>
                            <th>Guest</th>
                            <th>Check-in</th>
                            <th>Check-out</th>
                            <th>Guests</th>
                            <th>Status</th>
                            <th>Booked On</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var booking in bookings)
                        {
                            <tr>
                                <td>
                                    <span style="font-weight: 600; color: var(--purple);">#@booking.Id</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 40px; height: 40px; background: var(--success-gradient); border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-right: 12px;">
                                            <i class="bi bi-building text-white"></i>
                                        </div>
                                        <div>
                                            <div style="font-weight: 600; color: var(--gray-800);">@(booking.Hotel?.Name ?? "N/A")</div>
                                            <small class="text-muted">Hotel ID: @booking.HotelId</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div style="color: var(--gray-700);">
                                        <i class="bi bi-person me-1"></i>@(booking.User?.FullName ?? "N/A")
                                    </div>
                                </td>
                                <td>
                                    <div style="color: var(--gray-700);">
                                        <i class="bi bi-calendar-event me-1"></i>@booking.StartDate.ToString("MMM dd, yyyy")
                                    </div>
                                </td>
                                <td>
                                    <div style="color: var(--gray-700);">
                                        <i class="bi bi-calendar-event me-1"></i>@booking.EndDate.ToString("MMM dd, yyyy")
                                    </div>
                                </td>
                                <td>
                                    <span class="badge-modern badge-gradient-info">
                                        <i class="bi bi-people me-1"></i>@booking.HeadCount
                                    </span>
                                </td>
                                <td>
                                    <span class="badge-modern @GetModernStatusBadge(booking.Status)">
                                        <i class="bi @GetStatusIcon(booking.Status) me-1"></i>@booking.Status
                                    </span>
                                </td>
                                <td>
                                    <div style="color: var(--gray-600);">
                                        <i class="bi bi-calendar3 me-1"></i>@booking.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<Booking> bookings = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        isLoading = true;
        try
        {
            var allBookings = await UnitOfWork.Bookings.GetAllAsync();
            bookings = allBookings.OrderByDescending(b => b.CreatedAt).ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusColor(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Pending => "warning",
            BookingStatus.Confirmed => "success",
            BookingStatus.Rejected => "danger",
            BookingStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }

    private string GetModernStatusBadge(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Pending => "badge-gradient-warning",
            BookingStatus.Confirmed => "badge-gradient-success",
            BookingStatus.Rejected => "badge-gradient-danger",
            BookingStatus.Cancelled => "badge-gradient-info",
            _ => "badge-gradient-info"
        };
    }

    private string GetStatusIcon(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Pending => "bi-clock-history",
            BookingStatus.Confirmed => "bi-check-circle",
            BookingStatus.Rejected => "bi-x-circle",
            BookingStatus.Cancelled => "bi-dash-circle",
            _ => "bi-circle"
        };
    }
}
