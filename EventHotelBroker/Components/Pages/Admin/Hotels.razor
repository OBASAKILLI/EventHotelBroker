@page "/admin/hotels"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@inject IHotelService HotelService
@inject NavigationManager NavigationManager

<PageTitle>Manage Hotels - Admin</PageTitle>

<style>
    .modern-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.2);
    }

    .stats-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: none;
        height: 100%;
    }

    .stats-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }

    .stats-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stats-label {
        color: #6b7280;
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-top: 0.5rem;
    }

    .modern-tabs {
        background: white;
        border-radius: 12px;
        padding: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        border: none;
    }

    .modern-tabs .nav-link {
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        color: #6b7280;
        transition: all 0.3s ease;
        margin: 0 0.25rem;
    }

    .modern-tabs .nav-link:hover {
        background: #f3f4f6;
        color: #667eea;
    }

    .modern-tabs .nav-link.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .hotel-table-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .modern-table {
        margin: 0;
    }

    .modern-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .modern-table thead th {
        color: white;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
        padding: 1rem;
        border: none;
    }

    .modern-table tbody tr {
        transition: all 0.2s ease;
        border-bottom: 1px solid #f3f4f6;
    }

    .modern-table tbody tr:hover {
        background: #f9fafb;
        transform: scale(1.01);
    }

    .modern-table tbody td {
        padding: 1rem;
        vertical-align: middle;
        border: none;
    }

    .modern-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .badge-success-modern {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .badge-warning-modern {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
    }

    .badge-danger-modern {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

    .badge-info-modern {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
    }

    .action-btn {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        margin: 0 0.25rem;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn-view {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
    }

    .btn-approve {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn-reject {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

    .refresh-btn {
        background: white;
        border: 2px solid #e5e7eb;
        color: #667eea;
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .refresh-btn:hover {
        background: #667eea;
        color: white;
        border-color: #667eea;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #d1d5db;
        margin-bottom: 1rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .empty-state-text {
        color: #6b7280;
        font-size: 1rem;
    }

    .toast-modern {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .spinner-modern {
        width: 3rem;
        height: 3rem;
        border-width: 0.3rem;
    }
</style>

<div class="container-fluid px-4">
    <!-- Modern Header -->
    <div class="modern-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="text-white mb-2" style="font-weight: 700; font-size: 2rem;">
                    <i class="bi bi-building me-3"></i>Hotel Management
                </h1>
                <p class="text-white mb-0" style="opacity: 0.9;">Review and manage all hotel listings</p>
            </div>
            <button class="refresh-btn" @onclick="LoadHotels">
                <i class="bi bi-arrow-clockwise me-2"></i>Refresh
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@allHotels.Count()</p>
                        <p class="stats-label mb-0">Total Hotels</p>
                    </div>
                    <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-building text-white" style="font-size: 1.5rem;"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@pendingCount</p>
                        <p class="stats-label mb-0">Pending</p>
                    </div>
                    <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-clock-history text-white" style="font-size: 1.5rem;"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@approvedCount</p>
                        <p class="stats-label mb-0">Approved</p>
                    </div>
                    <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #10b981 0%, #059669 100%); border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-check-circle text-white" style="font-size: 1.5rem;"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <p class="stats-number">@rejectedCount</p>
                        <p class="stats-label mb-0">Rejected</p>
                    </div>
                    <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-x-circle text-white" style="font-size: 1.5rem;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modern Filter Tabs -->
    <ul class="nav modern-tabs">
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "all" ? "active" : "")" 
               style="cursor: pointer;" 
               @onclick="@(() => SetFilter("all"))">
                <i class="bi bi-grid me-2"></i>All Hotels
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "pending" ? "active" : "")" 
               style="cursor: pointer;" 
               @onclick="@(() => SetFilter("pending"))">
                <i class="bi bi-clock-history me-2"></i>Pending Approval
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "approved" ? "active" : "")" 
               style="cursor: pointer;" 
               @onclick="@(() => SetFilter("approved"))">
                <i class="bi bi-check-circle me-2"></i>Approved
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "rejected" ? "active" : "")" 
               style="cursor: pointer;" 
               @onclick="@(() => SetFilter("rejected"))">
                <i class="bi bi-x-circle me-2"></i>Rejected
            </a>
        </li>
    </ul>

    @if (isLoading)
    {
        <div class="hotel-table-card">
            <div class="text-center py-5">
                <div class="spinner-border spinner-modern text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading hotels...</p>
            </div>
        </div>
    }
    else if (!filteredHotels.Any())
    {
        <div class="hotel-table-card">
            <div class="empty-state">
                <i class="bi bi-inbox empty-state-icon"></i>
                <h3 class="empty-state-title">No Hotels Found</h3>
                <p class="empty-state-text">There are no hotels in this category yet.</p>
            </div>
        </div>
    }
    else
    {
        <div class="hotel-table-card">
            <div class="table-responsive">
                <table class="table modern-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Hotel Name</th>
                            <th>Location</th>
                            <th>Owner</th>
                            <th>Capacity</th>
                            <th>Price/Night</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var hotel in filteredHotels)
                        {
                            <tr>
                                <td>
                                    <span style="font-weight: 600; color: #667eea;">#@hotel.Id</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-right: 12px;">
                                            <i class="bi bi-building text-white"></i>
                                        </div>
                                        <div>
                                            <div style="font-weight: 600; color: #111827;">@hotel.Name</div>
                                            @if (hotel.IsPublished)
                                            {
                                                <small class="text-muted"><i class="bi bi-globe2 me-1"></i>Published</small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div style="color: #374151;">
                                        <i class="bi bi-geo-alt text-muted me-1"></i>@hotel.City, @hotel.Country
                                    </div>
                                </td>
                                <td>
                                    <div style="color: #374151;">@(hotel.Owner?.FullName ?? "N/A")</div>
                                </td>
                                <td>
                                    <span class="modern-badge badge-info-modern">
                                        <i class="bi bi-people me-1"></i>@hotel.Capacity
                                    </span>
                                </td>
                                <td>
                                    <div style="font-weight: 600; color: #059669;">
                                        @hotel.Currency @hotel.PricePerNight.ToString("N0")
                                    </div>
                                    <small class="text-muted">per night</small>
                                </td>
                                <td>
                                    @if (hotel.IsApproved)
                                    {
                                        <span class="modern-badge badge-success-modern">
                                            <i class="bi bi-check-circle me-1"></i>Approved
                                        </span>
                                    }
                                    else if (hotel.IsPublished)
                                    {
                                        <span class="modern-badge badge-warning-modern">
                                            <i class="bi bi-clock-history me-1"></i>Pending
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="modern-badge badge-danger-modern">
                                            <i class="bi bi-x-circle me-1"></i>Rejected
                                        </span>
                                    }
                                </td>
                                <td>
                                    <div style="color: #6b7280;">
                                        <i class="bi bi-calendar3 me-1"></i>@hotel.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex">
                                        <button class="action-btn btn-view" @onclick="() => ViewHotel(hotel.Id)" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        @if (!hotel.IsApproved && hotel.IsPublished)
                                        {
                                            <button class="action-btn btn-approve" @onclick="() => ApproveHotel(hotel.Id)" title="Approve Hotel">
                                                <i class="bi bi-check-lg"></i>
                                            </button>
                                            <button class="action-btn btn-reject" @onclick="() => RejectHotel(hotel.Id)" title="Reject Hotel">
                                                <i class="bi bi-x-lg"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show toast-modern @(messageType == "success" ? "bg-success" : "bg-danger") text-white" role="alert" style="min-width: 300px;">
                <div class="toast-header @(messageType == "success" ? "bg-success" : "bg-danger") text-white border-0">
                    <div style="width: 32px; height: 32px; background: rgba(255, 255, 255, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-right: 12px;">
                        <i class="bi @(messageType == "success" ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill")"></i>
                    </div>
                    <strong class="me-auto">@(messageType == "success" ? "Success" : "Error")</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => message = null"></button>
                </div>
                <div class="toast-body" style="padding: 1rem 1.5rem;">
                    @message
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<Hotel> allHotels = new();
    private IEnumerable<Hotel> filteredHotels = new List<Hotel>();
    private string filterStatus = "all";
    private int pendingCount = 0;
    private int approvedCount = 0;
    private int rejectedCount = 0;
    private string? message;
    private string messageType = "success";

    protected override async Task OnInitializedAsync()
    {
        await LoadHotels();
    }

    private async Task LoadHotels()
    {
        isLoading = true;
        try
        {
            allHotels = (await HotelService.GetAllHotelsAsync()).ToList();
            pendingCount = allHotels.Count(h => !h.IsApproved && h.IsPublished);
            approvedCount = allHotels.Count(h => h.IsApproved);
            rejectedCount = allHotels.Count(h => !h.IsApproved && !h.IsPublished);
            ApplyFilter();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading hotels: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetFilter(string status)
    {
        filterStatus = status;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredHotels = filterStatus switch
        {
            "pending" => allHotels.Where(h => !h.IsApproved && h.IsPublished),
            "approved" => allHotels.Where(h => h.IsApproved),
            "rejected" => allHotels.Where(h => !h.IsApproved && !h.IsPublished),
            _ => allHotels
        };
    }

    private void ViewHotel(int id)
    {
        NavigationManager.NavigateTo($"/hotels/{id}");
    }

    private async Task ApproveHotel(int id)
    {
        try
        {
            var hotel = allHotels.FirstOrDefault(h => h.Id == id);
            var result = await HotelService.ApproveHotelAsync(id);
            if (result)
            {
                ShowMessage($"Hotel '{hotel?.Name}' has been approved successfully! It is now visible to all users.", "success");
                await LoadHotels();
            }
            else
            {
                ShowMessage("Failed to approve hotel.", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error: {ex.Message}", "error");
        }
    }

    private async Task RejectHotel(int id)
    {
        try
        {
            var hotel = allHotels.FirstOrDefault(h => h.Id == id);
            var result = await HotelService.RejectHotelAsync(id);
            if (result)
            {
                ShowMessage($"Hotel '{hotel?.Name}' has been rejected. The owner will be notified.", "success");
                await LoadHotels();
            }
            else
            {
                ShowMessage("Failed to reject hotel.", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error: {ex.Message}", "error");
        }
    }

    private async void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
        StateHasChanged();
        
        // Auto-dismiss after 5 seconds
        await Task.Delay(5000);
        message = null;
        StateHasChanged();
    }
}
