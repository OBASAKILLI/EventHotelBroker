@page "/hotels/{HotelId:int}"
@page "/hotel-details"
@using EventHotelBroker.Models
@using EventHotelBroker.Services
@using EventHotelBroker.Repositories
@inject IHotelService HotelService
@inject IUnitOfWork UnitOfWork
@inject IBookingService BookingService
@inject NavigationManager NavigationManager

<PageTitle>@(hotel?.Name ?? "Hotel Details") - EventHotelBroker</PageTitle>

<div class="hotel-details-page">
    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-modern"></div>
            <p class="loading-text">Loading hotel details...</p>
        </div>
    }
    else if (hotel == null)
    {
        <div class="error-state">
            <i class="bi bi-exclamation-triangle error-icon"></i>
            <h2 class="error-title">Hotel Not Found</h2>
            <p class="error-text">The hotel you're looking for doesn't exist or has been removed.</p>
            <a href="/search" class="btn-modern btn-gradient-primary">
                <i class="bi bi-arrow-left me-2"></i>Back to Search
            </a>
        </div>
    }
    else
    {
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav class="breadcrumb-nav">
                <a href="/" class="breadcrumb-link"><i class="bi bi-house"></i> Home</a>
                <i class="bi bi-chevron-right breadcrumb-separator"></i>
                <a href="/search" class="breadcrumb-link">Search</a>
                <i class="bi bi-chevron-right breadcrumb-separator"></i>
                <span class="breadcrumb-current">@hotel.Name</span>
            </nav>
        </div>

        <!-- Hotel Header -->
        <div class="hotel-header">
            <div class="hotel-header-content">
                <h1 class="hotel-title">@hotel.Name</h1>
                <p class="hotel-location">
                    <i class="bi bi-geo-alt"></i> @hotel.Address, @hotel.City, @hotel.Country
                </p>
            </div>
            @if (hotel.IsApproved)
            {
                <div class="verified-badge">
                    <i class="bi bi-patch-check-fill"></i>
                    <span>Verified</span>
                </div>
            }
        </div>

        <div class="hotel-content">
            <!-- Main Content -->
            <div class="content-main">
                <!-- Image Gallery -->
                <div class="gallery-section">
                    @if (hotel.Images.Any())
                    {
                        <div id="hotelCarousel" class="carousel slide modern-carousel" data-bs-ride="carousel">
                            <div class="carousel-inner">
                                @for (int i = 0; i < hotel.Images.Count; i++)
                                {
                                    var image = hotel.Images.ElementAt(i);
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@image.Url" alt="@hotel.Name">
                                    </div>
                                }
                            </div>
                            @if (hotel.Images.Count > 1)
                            {
                                <button class="carousel-control-prev" type="button" data-bs-target="#hotelCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon"></span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#hotelCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon"></span>
                                </button>
                            }
                            <div class="carousel-indicators">
                                @for (int i = 0; i < hotel.Images.Count; i++)
                                {
                                    <button type="button" data-bs-target="#hotelCarousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="gallery-placeholder">
                            <i class="bi bi-building"></i>
                        </div>
                    }
                </div>

                <!-- Description -->
                <div class="info-section">
                    <h3 class="section-title">
                        <i class="bi bi-info-circle me-2"></i>About This Venue
                    </h3>
                    <p class="section-text">@hotel.Description</p>
                </div>

                <!-- Amenities -->
                @if (hotel.HotelAmenities.Any())
                {
                    <div class="info-section">
                        <h3 class="section-title">
                            <i class="bi bi-stars me-2"></i>Amenities
                        </h3>
                        <div class="amenities-grid">
                            @foreach (var hotelAmenity in hotel.HotelAmenities)
                            {
                                <div class="amenity-item">
                                    <i class="bi bi-check-circle-fill"></i>
                                    <span>@hotelAmenity.Amenity?.Name</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Location -->
                <div class="info-section">
                    <h3 class="section-title">
                        <i class="bi bi-geo-alt me-2"></i>Location
                    </h3>
                    <div class="location-details">
                        <div class="location-item">
                            <span class="location-label">Address:</span>
                            <span class="location-value">@hotel.Address</span>
                        </div>
                        <div class="location-item">
                            <span class="location-label">City:</span>
                            <span class="location-value">@hotel.City</span>
                        </div>
                        <div class="location-item">
                            <span class="location-label">Country:</span>
                            <span class="location-value">@hotel.Country</span>
                        </div>
                        @if (hotel.Latitude.HasValue && hotel.Longitude.HasValue)
                        {
                            <div class="location-coordinates">
                                <i class="bi bi-pin-map"></i>
                                @hotel.Latitude.Value.ToString("F6"), @hotel.Longitude.Value.ToString("F6")
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Booking Sidebar -->
            <div class="content-sidebar">
                <div class="booking-card">
                    <div class="booking-price">
                        <div class="price-amount">@hotel.Currency @hotel.PricePerNight.ToString("N0")</div>
                        <div class="price-period">per night</div>
                    </div>

                    <div class="booking-info">
                        <div class="info-item">
                            <i class="bi bi-people"></i>
                            <span>Up to @hotel.Capacity guests</span>
                        </div>
                        <div class="info-item">
                            <i class="bi bi-person"></i>
                            <span>@hotel.Owner?.FullName</span>
                        </div>
                    </div>

                    <div class="booking-divider"></div>

                    @if (!showBookingForm)
                    {
                        <div class="booking-actions">
                            <button class="btn-modern btn-gradient-primary btn-lg" @onclick="() => showBookingForm = true">
                                <i class="bi bi-calendar-check me-2"></i>Request Booking
                            </button>
                            <button class="btn-modern btn-outline-primary" @onclick="SendMessage">
                                <i class="bi bi-envelope me-2"></i>Send Message
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="booking-form-container">
                            <h5 class="booking-form-title">Booking Request</h5>
                            
                            @if (!string.IsNullOrEmpty(bookingMessage))
                            {
                                <div class="alert-modern alert-@(bookingSuccess ? "success" : "danger")">
                                    <i class="bi bi-@(bookingSuccess ? "check-circle" : "exclamation-circle")"></i>
                                    @bookingMessage
                                </div>
                            }

                            <EditForm Model="bookingRequest" OnValidSubmit="SubmitBooking" FormName="bookingForm" class="booking-form">
                                <DataAnnotationsValidator />

                                <div class="form-group-modern">
                                    <label class="form-label-modern">
                                        <i class="bi bi-calendar-event"></i> Check-in Date
                                    </label>
                                    <InputDate @bind-Value="bookingRequest.StartDate" class="form-input-modern" />
                                    <ValidationMessage For="@(() => bookingRequest.StartDate)" class="validation-message" />
                                </div>

                                <div class="form-group-modern">
                                    <label class="form-label-modern">
                                        <i class="bi bi-calendar-check"></i> Check-out Date
                                    </label>
                                    <InputDate @bind-Value="bookingRequest.EndDate" class="form-input-modern" />
                                    <ValidationMessage For="@(() => bookingRequest.EndDate)" class="validation-message" />
                                </div>

                                <div class="form-group-modern">
                                    <label class="form-label-modern">
                                        <i class="bi bi-people"></i> Number of Guests
                                    </label>
                                    <InputNumber @bind-Value="bookingRequest.HeadCount" class="form-input-modern" />
                                    <ValidationMessage For="@(() => bookingRequest.HeadCount)" class="validation-message" />
                                </div>

                                <div class="form-group-modern">
                                    <label class="form-label-modern">
                                        <i class="bi bi-chat-text"></i> Additional Notes (Optional)
                                    </label>
                                    <InputTextArea @bind-Value="bookingRequest.Notes" class="form-input-modern" rows="3" />
                                </div>

                                <div class="booking-actions">
                                    <button type="submit" class="btn-modern btn-gradient-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-send me-2"></i>
                                        }
                                        Submit Request
                                    </button>
                                    <button type="button" class="btn-modern btn-outline-secondary" @onclick="() => showBookingForm = false">
                                        <i class="bi bi-x me-2"></i>Cancel
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int HotelId { get; set; }

    [SupplyParameterFromForm]
    private BookingRequest bookingRequest { get; set; } = new();

    private Hotel? hotel;
    private bool isLoading = true;
    private bool showBookingForm = false;
    private bool isSubmitting = false;
    private string? bookingMessage;
    private bool bookingSuccess = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        // Since authentication is removed, use a default user ID (you can change this as needed)
        currentUserId = "1"; // Default user

        try
        {
            hotel = await HotelService.GetHotelWithDetailsAsync(HotelId);
        }
        catch (Exception)
        {
            hotel = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SubmitBooking()
    {
        if (string.IsNullOrEmpty(currentUserId) || hotel == null) return;

        isSubmitting = true;
        bookingMessage = null;

        try
        {
            var booking = new Booking
            {
                UserId = currentUserId,
                HotelId = hotel.Id,
                StartDate = bookingRequest.StartDate,
                EndDate = bookingRequest.EndDate,
                HeadCount = bookingRequest.HeadCount,
                Notes = bookingRequest.Notes
            };

            await BookingService.CreateBookingAsync(booking);
            
            bookingSuccess = true;
            bookingMessage = "Booking request submitted successfully! The hotel owner will review your request.";
            showBookingForm = false;
        }
        catch (Exception ex)
        {
            bookingSuccess = false;
            bookingMessage = $"Error submitting booking: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void SendMessage()
    {
        NavigationManager.NavigateTo($"/messages?hotelId={HotelId}");
    }

    public class BookingRequest
    {
        [Required]
        public DateTime StartDate { get; set; } = DateTime.Today.AddDays(1);
        
        [Required]
        public DateTime EndDate { get; set; } = DateTime.Today.AddDays(2);
        
        [Required]
        [Range(1, 10000)]
        public int HeadCount { get; set; } = 1;
        
        public string? Notes { get; set; }
    }
}
