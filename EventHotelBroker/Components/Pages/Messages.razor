@page "/messages"
@using EventHotelBroker.Models
@using EventHotelBroker.Repositories
@inject IUnitOfWork UnitOfWork

<PageTitle>Messages - EventHotelBroker</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Messages</h1>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!messages.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>No messages yet.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="list-group list-group-flush">
                            @foreach (var message in messages)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">
                                                @if (message.SenderId == currentUserId)
                                                {
                                                    <span>To: @message.Receiver?.FullName</span>
                                                }
                                                else
                                                {
                                                    <span>From: @message.Sender?.FullName</span>
                                                }
                                            </h6>
                                            <p class="mb-1">@message.Content</p>
                                            <small class="text-muted">@message.SentAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                        </div>
                                        @if (!message.IsRead && message.ReceiverId == currentUserId)
                                        {
                                            <span class="badge bg-primary">New</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<Message> messages = new();
    private string currentUserId = "1"; // Default user ID

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allMessages = await UnitOfWork.Messages.GetAllAsync();
            messages = allMessages
                .Where(m => m.SenderId == currentUserId || m.ReceiverId == currentUserId)
                .OrderByDescending(m => m.SentAt)
                .ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }
}
