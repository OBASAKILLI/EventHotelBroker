@page "/Account/Login"
@rendermode InteractiveServer
@using EventHotelBroker.Services
@using System.ComponentModel.DataAnnotations
@inject ISimpleAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Login - EventHotelBroker</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body p-5">
                    <h2 class="text-center mb-4">Welcome Back</h2>
                    <p class="text-center text-muted mb-4">Sign in to your account</p>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" id="email" placeholder="your@email.com" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" id="password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Signing in...</span>
                            }
                            else
                            {
                                <span>Sign In</span>
                            }
                        </button>
                    </EditForm>

                    <div class="text-center">
                        <p class="mb-0">Don't have an account? <a href="/Account/Register">Sign up</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result.Success)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
